import { useState, useEffect, useCallback } from 'react';
// Import the storage key directly
import { STORAGE_KEY as GOALS_STORAGE_KEY } from './useGoalSettingData';
import { ActionItem, Milestone, GoalSettingData } from '../types/goals';

export interface Event {
  id: string;
  title: string;
  start: Date;
  end: Date;
  category: 'business' | 'body' | 'balance' | 'personal';
  frequency?: 'daily' | 'weekly' | '3x-week';
  completed?: boolean;
  relatedGoal?: string;
  isAutoGenerated?: boolean; // Track if this was auto-generated from daily actions
}

export interface ActionPoolItem {
  id: string;
  title: string;
  duration: number; // in minutes
  category: 'business' | 'body' | 'balance' | 'personal';
  frequency: 'daily' | 'weekly' | '3x-week';
  completed?: boolean;
  relatedGoal?: string;
  priority?: 'high' | 'medium' | 'low';
}

export interface CalendarData {
  events: Event[];
  actionPool: ActionPoolItem[];
  lastUpdated: string;
  autoPopulateSettings: {
    dailyActionsEnabled: boolean;
    defaultDailyStartTime: string; // Format: "HH:MM"
  };
}

const STORAGE_KEY = 'coach-pack-calendar';

const defaultCalendarData: CalendarData = {
  events: [],
  actionPool: [],
  lastUpdated: new Date().toISOString(),
  autoPopulateSettings: {
    dailyActionsEnabled: true,
    defaultDailyStartTime: "09:00"
  }
};

export const useCalendarData = () => {
  const [data, setData] = useState<CalendarData>(defaultCalendarData);
  const [isLoaded, setIsLoaded] = useState(false);
  const [lastSaved, setLastSaved] = useState<Date | null>(null);

  // Load data on mount
  useEffect(() => {
    try {
      // First try to load calendar data
      const stored = localStorage.getItem(STORAGE_KEY);
      if (stored) {
        const parsedData = JSON.parse(stored);
        
        // Convert string dates to Date objects
        if (parsedData.events) {
          parsedData.events = parsedData.events.map((event: any) => ({
            ...event,
            start